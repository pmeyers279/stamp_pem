#!/usr/bin/env python
from stamp_pem import coherence_functions as cf
from stamp_pem import coh_io
import glob
import numpy as np
import optparse


def parse_command_line():
    """
    parse_command_line
    """
    parser = optparse.OptionParser()
    parser.add_option(
        "--darm-channel", help="channel 1", default='L1:GDS-CALIB_STRAIN',
        type=str)
    parser.add_option(
        "-s", "--start-time", dest='st', help="start time", type=int,
        default=None)
    parser.add_option(
        "-e", "--end-time", dest='et', help="end time", type=int, default=None)
    parser.add_option(
        "--directory", dest="directory", type=str, help="base directory")
    parser.add_option(
        "--channel-list", dest="cl", type=str, help="channel list")
    parser.add_option(
	"--flow", dest="flow", type=float, help="low frequency for plot")
    parser.add_option(
	"--fhigh", dest="fhigh", type=float, help="low frequency for plot")
    parser.add_option(
        "--num-chans", dest='nchans', type=int, help="number of channels", default=20)
    params, args = parser.parse_args()
    return params

params = parse_command_line()

seg_dir = coh_io.get_directory_structure(
    'SEGMENTS', params.st, params.directory)

chans = coh_io.read_list(params.cl)

subsystems = chans.keys()


#for i in range(len(flows)):
#    flow = flows[i]
#    fhigh = fhighs[i]
for subsystem in subsystems:
    njobs = np.ceil(len(chans[subsystem].keys()) / float(params.nchans))
    njobs = int(njobs)
    directory = coh_io.get_directory_structure(
		    subsystem, params.st, params.directory)
    for job in range(njobs):
        channels = []
        file = coh_io.create_coherence_data_filename(params.darm_channel,
   						 subsystem,
						 params.st, params.et,
						 directory=directory, tag=str(job+1))
            #file = 'results/%s/11308/L1-GDS-CALIB_STRAIN-%s-%d-1130806817-3600' % (subsystem,subsystem,job+1)
        for key in chans[subsystem].keys():
            channels.append(chans[subsystem][key])
        try:
            coh_matrix, frequencies, labels, N = cf.create_matrix_from_file(file, channels)
        except KeyError or h5py.h5e.LowLevelIOError or IOError or h5py._stub.IOError:
            continue
        if coh_matrix is None:
	    continue
        plot = cf.plot_coherence_matrix(coh_matrix, labels, frequencies, subsystem, N)
        ax = plot.gca()
        ax.set_xlim(params.flow,params.fhigh)
        plot.savefig(file+'-'+str(int(params.flow*10))+'-'+str(int(params.fhigh*10)))
        plot.close()
